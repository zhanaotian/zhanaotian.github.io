<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Android 半通明状态栏]]></title>
      <url>%2F2015%2F04%2F08%2FAndroid%20%E5%8D%8A%E9%80%9A%E6%98%8E%E7%8A%B6%E6%80%81%E6%A0%8F%2F</url>
      <content type="text"><![CDATA[Android 从4.4 版本开始支持半透明状态栏效果。4.4设置方式与5.0不同(5.0推出了Material Design,不用设置默认就有)。在4.4 设置半通明状态栏效果,有2种方法。 第一种方案 在代码中设置透明化 1234if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123; WindowManager.LayoutParams localLayoutParams = getWindow().getAttributes(); localLayoutParams.flags = (WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS | localLayoutParams.flags);&#125; 使布局扩展至系统状态栏,状态栏会覆盖在toolbar上。 在根布局中添加android:paddingTop=&quot;@dimen/toolbar_padding_top&quot;在values中的dimens文件里设为0dp,在values-v19的styles里设为25dp。 第二种方案 在代码中设置透明化12345678if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123; WindowManager.LayoutParams localLayoutParams = getWindow().getAttributes(); localLayoutParams.flags = (WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS| localLayoutParams.flags); if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) &#123; //设置边距 view(根布局).setFitsSystemWindows(true); &#125;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android Paint 属性详解]]></title>
      <url>%2F2015%2F01%2F19%2FAndroid%20Paint%20%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[Paint即画笔,在绘图过程中起到了极其重要的作用,画笔主要保存了颜色， 样式等绘制信息,指定了如何绘制文本和图形,画笔对象有很多设置方法， 大体上可以分为两类,一类与图形绘制相关,一类与文本绘制相关. 图形绘制 设置Paint的标志Paint.ANTI_ALIAS_FLAG 抗锯齿, Paint.FILTER_BITMAP_FLAG 位图过滤器,Paint.DITHER_FLAG 防抖动, Paint.UNDERLINE_TEXT_FLAG 启用下划线,Paint.STRIKE_THRU_TEXT_FLAG 启用中划线, Paint.FAKE_BOLD_TEXT_FLAG 加粗文本Paint.LINEAR_TEXT_FLAG 线性文本, Paint.SUBPIXEL_TEXT_FLAG 应用子像素抗锯齿效果Paint.DEV_KERN_TEXT_FLAG 使用设备的文本字距。 设置绘制的颜色 a代表透明度，r，g，b代表颜色值。setARGB(int a,int r,int g,int b); 设置a[0..255] 0：代表全透明 255代表不透明。setAlpha(int a); 设置绘制的颜色,使用颜色值来表示,该颜色值包括透明度和RGB颜色。setColor(int color) 设置是否使用抗锯齿功能,会消耗较大资源,绘制图形速度会变慢。setAntiAlias(boolean aa); 设置是否使用图像抖动处理,会使绘制出来的图片颜色更加平滑和饱满,图像更加清晰。setDither(boolean dither); 设置画笔的隐藏模式,INTING_OFF 或者 HINTING_ON。setHinting(int mode) 如果该项设置为true,则图像在动画进行中会滤掉对Bitmap图像 的优化操作,加快显示速度,本设置项依赖于dither和xfermode的设置setFilterBitmap(boolean filter); 设置MaskFilter,可以用不同的MaskFilter实现滤镜的效果,如滤化,立体等。setMaskFilter(MaskFilter maskfilter); 设置颜色过滤器,可以在绘制颜色时实现不用颜色的变换效果。setColorFilter(ColorFilter colorfilter); 设置绘制路径的效果,如点画线等。setPathEffect(PathEffect effect); 设置图像效果,使用Shader可以绘制出各种渐变效果。setShader(Shader shader); 在图形下面设置阴影层,产生阴影效果,radius为阴影的角度,dx和dy为阴影在x轴和y轴上的距离, color为阴影的颜色。setShadowLayer(float radius ,float dx,float dy,int color); 设置画笔的样式,为FILL 描边,FILL_OR_STROKE 描边并填充,或STROKE 填充。setStyle(Paint.Style style); 设置画笔的笔触风格，如圆形样式Cap.ROUND,或方形样式Cap.SQUARE,默认是Paint.Cap.BUTT,也是方形样式。setStrokeCap(Paint.Cap cap); 设置接合处的形态，如Join.MITER 锐角,Join.ROUND 圆弧,Join.BEVEL 直线。setStrokeJoin(Paint.Join join); 设置笔画的倾斜度,取值：&gt;=0,设置笔触的连接处的样式,可以和setStrokeJoin()来比较。setStrokeMiter(float miter ) 设置画笔的粗细度。setStrokeWidth(float width); 文本绘制 模拟实现粗体文字，设置在小字体上效果会非常差。‘setXfermode(Xfermode xfermode);’ 设置该项为true，将有助于文本在LCD屏幕上的显示效果。setSubpixelText(boolean subpixelText); 设置绘制文字的对齐方向。setTextAlign(Paint.Align align); 设置绘制文字x轴的缩放比例，可以实现文字的拉伸的效果 。setTextScaleX(float scaleX); 设置绘制文字的字号大小,设置值必须大于0。setTextSize(float textSize); 设置斜体文字，skewX为倾斜弧度,值为右负左正,官方推崇的值为-0.25。setTextSkewX(float skewX); 设置Typeface对象,即字体风格,包括粗体,斜体以及衬线体,非衬线体等。setTypeface(Typeface typeface); 设置带有下划线的文字效果。setUnderlineText(boolean underlineText); 设置带有删除线的效果。setStrikeThruText(boolean strikeThruText); 设置是否打开线性文本标识。setLinearText (boolean linearText) 设置地理位置,直接传入Locale.getDefault()。setTextLocale (Locale locale) 设置字体的样式,样式可以为null。setFontFeatureSettings(String settings)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Activity 生命周期]]></title>
      <url>%2F2015%2F01%2F10%2FActvitiy%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
      <content type="text"><![CDATA[Activity 生命周期 在Android 生命周期中有很多种状态，我们可以在多种状态中切换，来控制自己的生命周期。但是在这些状态中只有三种是稳定的，而其他的状态都是过渡的不会存在很久。 Resumed/Running:该状态下，Activity处于Activity栈顶部，用户可以与它进行交互。 Paused：该状态下，Activity被另外一个非全屏或者半通明的Activity遮盖，并压入Activity堆栈， 就进入了Paused状态，不能与用户交互，但是所有的状态信息，成员变量都保留，只有在系统内存 极低的情况下才会被回收。 Stopped：该状态下，Activity被另外一个Activity完全覆盖，就进入Stopped状态，这时它不可见，但是依然保持着所有的状态信息和成员变量。 Actvitiy 生命周期图 启动与销毁Activity的过程 在系统调用onCreate(),马上调用onStart(),之后再执行onResume()，停留在Resumed状态，完成启动。系统调用onDestroy()销毁Activity。 onCreate()：声明UI元素，定义成员变量，配置UI等（onCreate里面尽量少做事情，避免程序启动太久都看不到界面）。 onDestory()：进行资源清理，杀死后台线程。 暂停与恢复Activity的过程 当Activity被其他组件阻塞时部分不可见，就会导致当前Activity进入Pause状态，系统就会调用activity中的onPause()方法。当阻塞结束后，就会调用onResume()方法恢复到Resumed状态。 onPause()：释放系统资源（如broadcast receivers, sensors等）、停止动画或者是其他正在运行的操作。 onResume()：重新初始化那些在 onPause()中释放的资源，并执行一些停止的操作（如开启动画或）。 停止与重启Activity的过程 当Activity部分不可见时，有2种可能，从部分不可见到可见，系统调用onResume()恢复到Resumed状态；从部分不可见到完全不可见，系统调用onStop()停止Activity进入Stopped状态，注意无论什么原因导致Activity停止，系统总是会在onStop()之前调用onPause()方法。系统调用onRestart()，马上调用onStart()，之后再执行onResume()。 onStop()：释放系统资源、执行那些CPU intensive的shut-down操作，例如往数据库写信息。 onStart()：重新初始化那些在 onStop()中释放的资源。 重新创建Activity 当系统开始停止Activity时，只有在Activity实例会需要重新创建的情况下才会调用到onSaveInstanceState() (1) ，在这个方法里面可以指定额外的状态数据到Bunde中。如果这个Activity被destroyed然后这个实例又需要被重新创建时，系统会传递在 (1) 中的状态数据到 onCreate() (2) 与 onRestoreInstanceState()(3). 通常来说用户点击Back按钮或者是activity通过调用finish()结束自己时，系统就丢失了对Activity实例的引用，不会调用onSaveInstanceState()。如果是因为系统资源紧张或者跳转到其他的activity或者是点击Home而导致Activity的Destory，就会调用onSaveInstanceState() 方法。 要恢复状态信息调用onRestoreInstanceState()方法。 参考(http://hukai.me/android-training-course-in-chinese/basics/activity-lifecycle/index.html)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Android 导航栏和状态栏操作]]></title>
      <url>%2F2015%2F01%2F10%2FAndroid%20%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%92%8C%E7%8A%B6%E6%80%81%E6%A0%8F%E6%93%8D%E4%BD%9C%2F</url>
      <content type="text"><![CDATA[淡化状态栏和系统栏 在版本为4.0以上的Android系统上,可以使用 SYSTEM_UI_FLAG_LOW_PROFILE 这个标签 decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE); 显示状态栏与导航栏 decorView.setSystemUiVisibility(0); 隐藏状态栏 在4.0及以下版本中隐藏状态栏有2种方法 在你的manifest文件中设置Activity的主题123&lt;application android:theme=&quot;@android:style/Theme.Holo.NoActionBar.Fullscreen&quot; &gt;&lt;/application&gt; 设置主题的优势是:易于维护，且不像动态设置标签那样容易出错。有更流畅的UI转换，因为在初始化你的Activity之前,系统已经得到了需要渲染UI的信息。 使用WindowManager来动态隐藏状态栏1234567891011public class MainActivity extends Activity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); if (Build.VERSION.SDK_INT &lt; 16) &#123; getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); &#125; setContentView(R.layout.activity_main); &#125;&#125; 在4.1及以上版本中隐藏状态栏。使用 setSystemUiVisibility() 进行动态隐藏 12345View decorView = getWindow().getDecorView();int uiOptions = View.SYSTEM_UI_FLAG_FULLSCREEN;decorView.setSystemUiVisibility(uiOptions);ActionBar actionBar = getActionBar();actionBar.hide(); 让内容显示在状态栏之后。 使用 SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN 标签并在xml 中使用android:fitsSystemWindows=”true”,它会调整父ViewGroup使它留出特定区域给系统栏,确保应用中特定区域不会被系统栏掩盖。 隐藏导航栏 在4.0及以上版本中隐藏导航栏 1234View decorView = getWindow().getDecorView();int uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN;decorView.setSystemUiVisibility(uiOptions); 让内容显示在导航栏之后 使用 SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION 标签 要注意的几点: 一旦UI标签被清除就必须重新设置(比如跳到另外一个Activity)。 在不同地方监听UI标签是有所不同的,比如在Activity的onCreate()方法中隐藏状态 栏,当用户按下home键系统栏就会重新显示,如果你想让在不同Activity之间切换,系统UI保持不变，你需要在onResume()与onWindowFocusChaned()里设定UI标签。 setSystemUiVisibility()仅仅在被调用的View显示的时候才会生效。 当从View导航到别的地方时，用setSystemUiVisibility()设置的标签会被清除。 全屏沉浸式应用 使用非粘性沉浸模式 1234567mDecorView.setSystemUiVisibility( View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // 隐藏导航栏 | View.SYSTEM_UI_FLAG_FULLSCREEN // 隐藏状态栏 | View.SYSTEM_UI_FLAG_IMMERSIVE); 使用粘性沉浸模式 1234567decorView.setSystemUiVisibility( View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY); 注意沉浸式只能在android 4.4以上的系统使用 响应UI可见性的变化123456789101112decorView.setOnSystemUiVisibilityChangeListener (new View.OnSystemUiVisibilityChangeListener() &#123; @Override public void onSystemUiVisibilityChange(int visibility) &#123; //全屏 if ((visibility &amp; View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) &#123; &#125; else &#123; &#125; &#125;&#125;);]]></content>
    </entry>

    
  
  
</search>
