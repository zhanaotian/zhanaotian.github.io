<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jkwarthegarden</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jkwarthegarden.com/"/>
  <updated>2017-04-19T07:38:59.000Z</updated>
  <id>http://jkwarthegarden.com/</id>
  
  <author>
    <name>JKwar</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 启动Java8的lambad表达式</title>
    <link href="http://jkwarthegarden.com/2016/05/20/Android%20%E5%90%AF%E7%94%A8Java8%E7%9A%84lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://jkwarthegarden.com/2016/05/20/Android 启用Java8的lambda表达式/</id>
    <published>2016-05-20T07:37:59.000Z</published>
    <updated>2017-04-19T07:38:59.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="添加到project的build-gradle中。"><a href="#添加到project的build-gradle中。" class="headerlink" title="添加到project的build.gradle中。"></a>添加到project的build.gradle中。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">   repositories &#123;</div><div class="line">      mavenCentral()</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   dependencies &#123;</div><div class="line">      classpath &apos;me.tatarka:gradle-retrolambda:3.6.0&apos;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Required because retrolambda is on maven central</div><div class="line">repositories &#123;</div><div class="line">   mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: &apos;com.android.application&apos; //or apply plugin: &apos;java&apos;</div><div class="line">apply plugin: &apos;me.tatarka.retrolambda&apos;</div></pre></td></tr></table></figure>
<a id="more"></a>  
<h4 id="设置java版本。"><a href="#设置java版本。" class="headerlink" title="设置java版本。"></a>设置java版本。</h4><p>在build.gradle的android节点下添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">  compileOptions &#123;</div><div class="line">    //设置java版本</div><div class="line">    sourceCompatibility JavaVersion.VERSION_1_8</div><div class="line">    targetCompatibility JavaVersion.VERSION_1_8</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="对项目进行build。"><a href="#对项目进行build。" class="headerlink" title="对项目进行build。"></a>对项目进行build。</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;添加到project的build-gradle中。&quot;&gt;&lt;a href=&quot;#添加到project的build-gradle中。&quot; class=&quot;headerlink&quot; title=&quot;添加到project的build.gradle中。&quot;&gt;&lt;/a&gt;添加到project的build.gradle中。&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   repositories &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      mavenCentral()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   dependencies &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      classpath &amp;apos;me.tatarka:gradle-retrolambda:3.6.0&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// Required because retrolambda is on maven central&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;repositories &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   mavenCentral()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.android.application&amp;apos; //or apply plugin: &amp;apos;java&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apply plugin: &amp;apos;me.tatarka.retrolambda&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="lambad" scheme="http://jkwarthegarden.com/categories/lambad/"/>
    
    
      <category term="lambad" scheme="http://jkwarthegarden.com/tags/lambad/"/>
    
  </entry>
  
  <entry>
    <title>FragmentManager Api 重要方法</title>
    <link href="http://jkwarthegarden.com/2016/04/27/%E4%BA%86%E8%A7%A3%20FragmentManager/"/>
    <id>http://jkwarthegarden.com/2016/04/27/了解 FragmentManager/</id>
    <published>2016-04-26T16:00:00.000Z</published>
    <updated>2017-04-27T09:05:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>FragmentManager Api 重要方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>addOnBackStackChangedListener</td>
<td style="text-align:center">添加一个新的侦听器，监听Fragment栈的添加情况</td>
</tr>
<tr>
<td>beginTransaction()</td>
<td style="text-align:center">创建一个新的事务来在运行时更改Fragment</td>
</tr>
<tr>
<td>findFragmentById(int id)</td>
<td style="text-align:center">通过id  从Activity的XML布局中查找Fragment实例</td>
</tr>
<tr>
<td>findFragmentByTag(String tag)</td>
<td style="text-align:center">通过Tag 查找Fragment实例</td>
</tr>
<tr>
<td>popBackStack()</td>
<td style="text-align:center">从Fragment栈中删除一个Fragment实例</td>
</tr>
<tr>
<td>popBackStackImmediate()</td>
<td style="text-align:center">立即从Fragment栈中删除一个Fragment实例</td>
</tr>
<tr>
<td>executePendingTransactions()</td>
<td style="text-align:center">强制立即执行提交</td>
</tr>
<tr>
<td>getBackStackEntryAt(int index)</td>
<td style="text-align:center">根据坐标从Fragment栈返回对应的实例</td>
</tr>
<tr>
<td>getBackStackEntryCount()</td>
<td style="text-align:center">返回当前Fragment栈里Fragment实例的数量</td>
</tr>
</tbody>
</table>
 <a id="more"></a>  
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FragmentManager Api 重要方法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;addOnBackStackChangedListener&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;添加一个新的侦听器，监听Fragment栈的添加情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;beginTransaction()&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;创建一个新的事务来在运行时更改Fragment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;findFragmentById(int id)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;通过id  从Activity的XML布局中查找Fragment实例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;findFragmentByTag(String tag)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;通过Tag 查找Fragment实例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;popBackStack()&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从Fragment栈中删除一个Fragment实例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;popBackStackImmediate()&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;立即从Fragment栈中删除一个Fragment实例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;executePendingTransactions()&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;强制立即执行提交&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getBackStackEntryAt(int index)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;根据坐标从Fragment栈返回对应的实例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getBackStackEntryCount()&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;返回当前Fragment栈里Fragment实例的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Fragment" scheme="http://jkwarthegarden.com/categories/Fragment/"/>
    
    
      <category term="FragmentManager" scheme="http://jkwarthegarden.com/tags/FragmentManager/"/>
    
  </entry>
  
  <entry>
    <title>Fragment 详解（三）</title>
    <link href="http://jkwarthegarden.com/2016/04/27/Fragment%20%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://jkwarthegarden.com/2016/04/27/Fragment 详解（三）/</id>
    <published>2016-04-26T16:00:00.000Z</published>
    <updated>2017-04-27T08:28:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Fragment的startActivityForResult"><a href="#Fragment的startActivityForResult" class="headerlink" title="Fragment的startActivityForResult"></a>Fragment的startActivityForResult</h3><blockquote>
<p>Fragment的startActivityForResult和Activity的startActivityForResult类似，只不过fragment没有setResult方法，所以只能使用父activity的setResult方法。</p>
</blockquote>
 <a id="more"></a>  
<p>水果列表页<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public class FruitsListFragment extends ListFragment &#123;</div><div class="line">    public static final int REQUEST_CODE=0x110;</div><div class="line">    public static final String REQUEST_DETAIL=&quot;request_detail&quot;;</div><div class="line">    private ArrayAdapter&lt;String&gt; mAdapter;</div><div class="line"></div><div class="line">    private int mPostion;</div><div class="line"></div><div class="line">    private List&lt;String&gt; mList = Arrays.asList(&quot;苹果&quot;, &quot;香蕉&quot;, &quot;玻璃&quot;, &quot;梨子&quot;, &quot;西瓜&quot;, &quot;橙子&quot;);</div><div class="line"></div><div class="line">    public FruitsListFragment() &#123;</div><div class="line">        // Required empty public constructor</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onListItemClick(ListView l, View v, int position, long id) &#123;</div><div class="line">        mPostion = position;</div><div class="line">        Intent intent = new Intent(getActivity(), FruitsDetailsActivity.class);</div><div class="line">        intent.putExtra(REQUEST_DETAIL, mList.get(position));</div><div class="line">        //跳转</div><div class="line">        startActivityForResult(intent, REQUEST_CODE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onActivityCreated(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onActivityCreated(savedInstanceState);</div><div class="line">        mAdapter = new ArrayAdapter&lt;&gt;(getActivity(), android.R.layout.simple_list_item_1, mList);</div><div class="line">        //设置适配器</div><div class="line">        setListAdapter(mAdapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">        //修改数据</div><div class="line">        if (requestCode==REQUEST_CODE) &#123;</div><div class="line">            mList.set(mPostion,data.getStringExtra(REQUEST_DETAIL));</div><div class="line">            mAdapter.notifyDataSetChanged();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>详情页<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">public class FruitsDetailsFragment extends Fragment &#123;</div><div class="line"></div><div class="line">    private static final String ARG_PARAM1 = &quot;param1&quot;;</div><div class="line"></div><div class="line">    private String mParam1;</div><div class="line"></div><div class="line">    public FruitsDetailsFragment() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static FruitsDetailsFragment newInstance(String param1) &#123;</div><div class="line">        FruitsDetailsFragment fragment = new FruitsDetailsFragment();</div><div class="line">        Bundle args = new Bundle();</div><div class="line">        args.putString(ARG_PARAM1, param1);</div><div class="line">        fragment.setArguments(args);</div><div class="line">        return fragment;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        if (getArguments() != null) &#123;</div><div class="line">            mParam1 = getArguments().getString(ARG_PARAM1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        View view=inflater.inflate(R.layout.fragment_fragment_fruits_details, container, false);</div><div class="line">        final EditText editText= (EditText) view.findViewById(R.id.fruits_details_ed);</div><div class="line">        editText.setText(mParam1);</div><div class="line">        view.findViewById(R.id.updateBtn).setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                Intent intent = new Intent();</div><div class="line">                intent.putExtra(REQUEST_DETAIL, editText.getText().toString());</div><div class="line">                getActivity().setResult(110, intent);</div><div class="line">                getActivity().finish();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        return view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="嵌套Fragment"><a href="#嵌套Fragment" class="headerlink" title="嵌套Fragment"></a>嵌套Fragment</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class ParentFragment extends Fragment &#123;</div><div class="line">    public ParentFragment() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        return inflater.inflate(R.layout.fragment_parent, container, false);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">        Fragment childFragment = new ChildFragment();</div><div class="line">        FragmentTransaction transaction = getChildFragmentManager().beginTransaction();</div><div class="line">        transaction.replace(R.id.child_fragment_container, childFragment).commit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static class ChildFragment extends Fragment &#123;</div><div class="line">        @Override</div><div class="line">        public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) &#123;</div><div class="line">            return inflater.inflate(R.layout.fragment_child, container, false);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>fragment_parent.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;fill_parent&quot;</div><div class="line">    android:layout_height=&quot;fill_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;200dp&quot;</div><div class="line">        android:gravity=&quot;center&quot;</div><div class="line">        android:textSize=&quot;26sp&quot;</div><div class="line">        android:background=&quot;@color/colorAccent&quot;</div><div class="line">        android:text=&quot;I am the parent fragment&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;FrameLayout</div><div class="line">        android:id=&quot;@+id/child_fragment_container&quot;</div><div class="line">        android:layout_width=&quot;fill_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>fragment_child.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:gravity=&quot;center&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;ChildFragment&quot;</div><div class="line">        android:textSize=&quot;26sp&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/zhanaotian/FragmentDemo/tree/master" target="_blank" rel="external">源码下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Fragment的startActivityForResult&quot;&gt;&lt;a href=&quot;#Fragment的startActivityForResult&quot; class=&quot;headerlink&quot; title=&quot;Fragment的startActivityForResult&quot;&gt;&lt;/a&gt;Fragment的startActivityForResult&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Fragment的startActivityForResult和Activity的startActivityForResult类似，只不过fragment没有setResult方法，所以只能使用父activity的setResult方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Fragment" scheme="http://jkwarthegarden.com/categories/Fragment/"/>
    
    
      <category term="Fragment" scheme="http://jkwarthegarden.com/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>Fragment 详解（二）</title>
    <link href="http://jkwarthegarden.com/2016/04/26/Fragment%20%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://jkwarthegarden.com/2016/04/26/Fragment 详解（二）/</id>
    <published>2016-04-25T16:00:00.000Z</published>
    <updated>2017-04-27T08:29:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Activity与Fragment通信"><a href="#Activity与Fragment通信" class="headerlink" title="Activity与Fragment通信"></a>Activity与Fragment通信</h3><blockquote>
<p>一个activity通常包含多个fragment，而fragment通常只能与其父activity通信，fragment把activity视为与其他fragment交互的桥梁。要记住的是fragment不应该互相沟通，而应该只通过其父activity进行沟通，因为fragment应该是模块化、独立、可重复使用的组件，fragment互相通信不符合低耦合，高内聚的设计。</p>
</blockquote>
<p>fragment与activity通信有三种方法：</p>
<ul>
<li>Bundle     activity构造一个fragment并设置参数</li>
<li>方法       activity可以调用fragment实例上面的方法</li>
<li><p>Listener   fragment可以通过界面触发activity中的侦听事件</p>
<a id="more"></a>  
</li>
</ul>
<h4 id="Fragment-with-Arguments"><a href="#Fragment-with-Arguments" class="headerlink" title="Fragment with Arguments"></a>Fragment with Arguments</h4><blockquote>
<p>修改刚刚的LifecycleFragment，创建一个使用newInstance参数创建fragment的静态方法，并设置参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class FooFragment extends Fragment &#123;</div><div class="line">  private static final String ARG_PARAM1 = &quot;param1&quot;;</div><div class="line">  private String mParam1;</div><div class="line">  public static FooFragment newInstance(String param1) &#123;</div><div class="line">        FooFragment fragment = new FooFragment();</div><div class="line">        Bundle args = new Bundle();</div><div class="line">        args.putString(ARG_PARAM1, param1);</div><div class="line">        fragment.setArguments(args);</div><div class="line">        return fragment;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>在onCreate访问参数，获取数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        if (getArguments() != null) &#123;</div><div class="line">            mParam1 = getArguments().getString(ARG_PARAM1);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在DynamicAddActivity中动态加载fragment<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FragmentTransaction ft = getSupportFragmentManager().beginTransaction();</div><div class="line">FooFragment fragment = FooFragment.newInstance(&quot;fragment 生命周期&quot;);</div><div class="line">ft.replace(R.id.content, fragment);</div><div class="line">ft.commit();</div></pre></td></tr></table></figure></p>
<h4 id="Fragment-Methods"><a href="#Fragment-Methods" class="headerlink" title="Fragment Methods"></a>Fragment Methods</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class FooFragment extends Fragment &#123;</div><div class="line">  public void setParam(String param) &#123;</div><div class="line">        textView.setText(param);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (fooFragment!=null&amp;&amp;fooFragment.isVisible()) &#123;</div><div class="line">            fooFragment.setParam(link+1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Fragment-Listener"><a href="#Fragment-Listener" class="headerlink" title="Fragment Listener"></a>Fragment Listener</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class FooFragment extends Fragment &#123;</div><div class="line">  private OnItemSelectedListener listener;</div><div class="line"></div><div class="line">  public interface OnItemSelectedListener &#123;</div><div class="line">        public void onItemSelected(String link);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public void onAttach(Context context) &#123;</div><div class="line">      super.onAttach(context);</div><div class="line">    if (context instanceof OnItemSelectedListener) &#123;</div><div class="line">          listener = (OnItemSelectedListener) context;</div><div class="line">    &#125; else &#123;</div><div class="line">          throw new ClassCastException(context.toString()</div><div class="line">                    + &quot; must implement MyListFragment.OnItemSelectedListener&quot;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  @Override</div><div class="line">  public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        // Inflate the layout for this fragment</div><div class="line">        View view = inflater.inflate(R.layout.fragment_foo, container, false);</div><div class="line">        textView = (TextView) view.findViewById(R.id.textView1);</div><div class="line">        textView.setText(mParam1);</div><div class="line">        view.findViewById(R.id.button1).setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                if (listener != null) &#123;</div><div class="line">                    listener.onItemSelected(textView.getText().toString());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        return view;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在activity中实现OnItemSelectedListener监听器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class DynamicAddActivity extends AppCompatActivity implements FooFragment.OnItemSelectedListener&#123;</div><div class="line">    @Override</div><div class="line">    public void onItemSelected(String link) &#123;</div><div class="line">        if (fooFragment!=null&amp;&amp;fooFragment.isVisible()) &#123;</div><div class="line">            fooFragment.setParam(link+1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="给fragment添加导航菜单"><a href="#给fragment添加导航菜单" class="headerlink" title="给fragment添加导航菜单"></a>给fragment添加导航菜单</h3><ol>
<li><p>在Fragment的onCreate加载菜单项。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">     super.onCreate(savedInstanceState);</div><div class="line">     setHasOptionsMenu(true);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过onCreateOptionsMenu直接向Fragment添加菜单项。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">  public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) &#123;</div><div class="line">      inflater.inflate(R.menu.fragment_menu, menu);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过onOptionsItemSelected管理Fragment的菜单项。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public boolean onOptionsItemSelected(MenuItem item) &#123;</div><div class="line">        switch (item.getItemId()) &#123;</div><div class="line">            case R.id.edit_item:</div><div class="line">                Toast.makeText(getActivity(), &quot;点击&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                return true;</div><div class="line">            default:</div><div class="line">                return super.onOptionsItemSelected(item);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="查找Fragment实例"><a href="#查找Fragment实例" class="headerlink" title="查找Fragment实例"></a>查找Fragment实例</h3><blockquote>
<p>通常我们需要在Activity布局文件中查找Fragment实例，有3种查找现有Fragment实例的方法：</p>
</blockquote>
<ol>
<li>ID -通过调用查找片段findFragmentById上FragmentManager</li>
<li>Tag -通过调用查找片段findFragmentByTag上FragmentManager</li>
<li>Pager -通过调用getRegisteredFragmenta 查找片段PagerAdapter</li>
</ol>
<h4 id="通过ID查找Fragment。"><a href="#通过ID查找Fragment。" class="headerlink" title="通过ID查找Fragment。"></a>通过ID查找Fragment。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class SingleFragmentActivity extends AppCompatActivity &#123;</div><div class="line">    public Fragment createFragment();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_content);</div><div class="line">        //fragment管理器</div><div class="line">        FragmentManager fm = getSupportFragmentManager();</div><div class="line">        //根据id查找fragment实例</div><div class="line">        Fragment fragment = fm.findFragmentById(R.id.content);</div><div class="line">        //通过判断savedInstanceState时候为空，登出activity时候重新创建</div><div class="line">        if (fragment == null) &#123;</div><div class="line">            fragment = createFragment();</div><div class="line">            //添加</div><div class="line">            fm.beginTransaction().add(R.id.content, fragment).commit();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="通过Tag查找Fragment实例。"><a href="#通过Tag查找Fragment实例。" class="headerlink" title="通过Tag查找Fragment实例。"></a>通过Tag查找Fragment实例。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class SingleFragmentActivity extends AppCompatActivity &#123;</div><div class="line">    @Override</div><div class="line">    public void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_content);</div><div class="line">        //fragment管理器</div><div class="line">        FragmentManager fm = getSupportFragmentManager();</div><div class="line">        //根据id查找fragment实例</div><div class="line">        Fragment fragment = fm.findFragmentByTag(“lifecycle”);</div><div class="line">        //通过判断savedInstanceState时候为空，登出activity时候重新创建</div><div class="line">        if (fragment == null) &#123;</div><div class="line">            //添加</div><div class="line">            fm.beginTransaction().add(R.id.content, fragment).commit();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="如果你使用FragmentPagerAdapter可以通过getRegisteredFragment获取fragment实例。"><a href="#如果你使用FragmentPagerAdapter可以通过getRegisteredFragment获取fragment实例。" class="headerlink" title="如果你使用FragmentPagerAdapter可以通过getRegisteredFragment获取fragment实例。"></a>如果你使用FragmentPagerAdapter可以通过getRegisteredFragment获取fragment实例。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adapterViewPager.getRegisteredFragment(0);</div></pre></td></tr></table></figure>
<h3 id="管理Fragment回退栈"><a href="#管理Fragment回退栈" class="headerlink" title="管理Fragment回退栈"></a>管理Fragment回退栈</h3><blockquote>
<p>fragment栈，和activity栈类似，我们可以通过activity维护一个回退栈来保存每次Fragment事务发生的变化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">final FragmentManager fm = getSupportFragmentManager();</div><div class="line">        //创建事务</div><div class="line">        FragmentTransaction fx = fm.beginTransaction();</div><div class="line">        if (oneFragment == null) &#123;</div><div class="line">            oneFragment = new OneFragment();</div><div class="line">            fx.addToBackStack(&quot;one_Fragment&quot;);</div><div class="line">            fx.add(R.id.fragmenttask_content, oneFragment, &quot;oneFragment&quot;).commit();</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>从fragment栈弹出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (fm.getBackStackEntryCount() &gt; 0) &#123;</div><div class="line">       fm.popBackStack();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/zhanaotian/FragmentDemo/tree/master" target="_blank" rel="external">源码下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Activity与Fragment通信&quot;&gt;&lt;a href=&quot;#Activity与Fragment通信&quot; class=&quot;headerlink&quot; title=&quot;Activity与Fragment通信&quot;&gt;&lt;/a&gt;Activity与Fragment通信&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一个activity通常包含多个fragment，而fragment通常只能与其父activity通信，fragment把activity视为与其他fragment交互的桥梁。要记住的是fragment不应该互相沟通，而应该只通过其父activity进行沟通，因为fragment应该是模块化、独立、可重复使用的组件，fragment互相通信不符合低耦合，高内聚的设计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;fragment与activity通信有三种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bundle     activity构造一个fragment并设置参数&lt;/li&gt;
&lt;li&gt;方法       activity可以调用fragment实例上面的方法&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Listener   fragment可以通过界面触发activity中的侦听事件&lt;/p&gt;
    
    </summary>
    
      <category term="Fragment" scheme="http://jkwarthegarden.com/categories/Fragment/"/>
    
    
      <category term="Fragment" scheme="http://jkwarthegarden.com/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>Fragment 详解（一）</title>
    <link href="http://jkwarthegarden.com/2016/04/25/Fragment%20%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://jkwarthegarden.com/2016/04/25/Fragment 详解（一）/</id>
    <published>2016-04-24T16:00:00.000Z</published>
    <updated>2017-04-27T08:29:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Fragment-简介"><a href="#Fragment-简介" class="headerlink" title="Fragment 简介"></a>Fragment 简介</h3><blockquote>
<p>Android 在 Android 3.0（API 级别  11）中引入了片段，主要是为了给大屏幕（如平板电脑）<br>上更加动态和灵活的UI设计提供支持。可以将多个Fragmen组合在一个Activity中来构建多窗格UI，<br>以及在多个Activity中重复使用某个Fragment，可以将Fragment视为Activity的模块化组成部分。<br>Fragment是必须嵌入Activity中，其生命周期直接受宿主 Activity 生命周期的影响，<br>它不能独立于Activity运行。</p>
</blockquote>
<p><img src="https://developer.android.google.cn/images/fundamentals/fragments.png" alt=""></p>
 <a id="more"></a>  
<h3 id="定义-Fragment"><a href="#定义-Fragment" class="headerlink" title="定义 Fragment"></a>定义 Fragment</h3><blockquote>
<p>在Android studio 新建FragmentDemo，然后新建一个FooFragment（右键-&gt;New-&gt;Fragment-&gt;Fragment(Blank)-&gt;FooFragment），不勾选inclue fragment fatoty methods ？、Inclue interface callback ？</p>
</blockquote>
<p>FooFragment 代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class FooFragment extends Fragment &#123;</div><div class="line">    public FooFragment() &#123;</div><div class="line">        // Required empty public constructor</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        // Inflate the layout for this fragment</div><div class="line">        return inflater.inflate(R.layout.fragment_foo, container, false);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>fragment_foo.xml 代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:gravity=&quot;center&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/textView1&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;TextView&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/button1&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;button&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>向Activity 中嵌入Fragment有2种方式：</p>
<ul>
<li>静态使用XML</li>
<li>动态使用Java代码</li>
</ul>
<h4 id="静态嵌入"><a href="#静态嵌入" class="headerlink" title="静态嵌入"></a>静态嵌入</h4><blockquote>
<p>新建一个Activity，命名为StateAddActivity，将fragment添加到StateAddActivity的xml布局文件中。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class StateAddActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_stateadd);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>activity_stateadd.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot; &gt;</div><div class="line"></div><div class="line">    &lt;fragment</div><div class="line">        android:name=&quot;com.jkwar.FragmentDemo.fragment.FooFragment&quot;</div><div class="line">        android:id=&quot;@+id/fooFragment&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        /&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<h4 id="动态嵌入"><a href="#动态嵌入" class="headerlink" title="动态嵌入"></a>动态嵌入</h4><blockquote>
<p>新建一个Activity，命名为DynamicAddActivity，通过FragmentManager类和FragmentTransaction类添加，删除和替换Fragment。</p>
</blockquote>
<p>判断Fragment 状态的常用方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>isAdded()</td>
<td style="text-align:center">如果fragment被添加到了activity中那么返回true，否则返回false</td>
</tr>
<tr>
<td>isHidden()</td>
<td style="text-align:center">如果fragment对象被隐藏那么返回true，否则返回false</td>
</tr>
<tr>
<td>isRemoving()</td>
<td style="text-align:center">如果fragment对象正在从父Activity中被删除那么返回true，否则返回false</td>
</tr>
<tr>
<td>isResumed()</td>
<td style="text-align:center">如果Fragment对象是在恢复状态中那么方法ture，否则返回false</td>
</tr>
<tr>
<td>isVisible()</td>
<td style="text-align:center">如果该Fragment对象对用户可见那么就返回true，否则返回false</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">//fragment 管理器</div><div class="line">FragmentManager fm;</div><div class="line">FooFragment fooFragment;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">      super.onCreate(savedInstanceState);</div><div class="line">      setContentView(R.layout.activity_dynamic_add);</div><div class="line">      ButterKnife.bind(this);</div><div class="line">      //初始化</div><div class="line">      fm = getSupportFragmentManager();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void onViewClicked(View view) &#123;</div><div class="line">      //fragment事务</div><div class="line">      FragmentTransaction bt = fm.beginTransaction();</div><div class="line">      switch (view.getId()) &#123;</div><div class="line">          case R.id.addBtn:</div><div class="line">              if (fooFragment == null) &#123;</div><div class="line">                  fooFragment =new FooFragment();</div><div class="line">                  bt.add(R.id.dynamic_content, fooFragment, &quot;fooFragment&quot;);</div><div class="line">              &#125; else &#123;</div><div class="line">                  bt.replace(R.id.dynamic_content, fooFragment, &quot;fooFragment&quot;);</div><div class="line">              &#125;</div><div class="line">              break;</div><div class="line">          case R.id.removeBtn:</div><div class="line">              if (fooFragment != null &amp;&amp; fooFragment.isAdded()) &#123;</div><div class="line">                  bt.remove(fooFragment);</div><div class="line">              &#125;</div><div class="line">              break;</div><div class="line">          case R.id.hideBtn:</div><div class="line">              if (fooFragment != null &amp;&amp; fooFragment.isVisible()) &#123;</div><div class="line">                  bt.hide(fooFragment);</div><div class="line">              &#125;</div><div class="line">              break;</div><div class="line">          case R.id.showBtn:</div><div class="line">              if (fooFragment != null &amp;&amp; fooFragment.isHidden()) &#123;</div><div class="line">                  bt.show(fooFragment);</div><div class="line">              &#125;</div><div class="line">              break;</div><div class="line">          case R.id.replaceBtn:</div><div class="line">              FooFragment ff = FooFragment.newInstance(&quot;梨子&quot;);</div><div class="line">              bt.replace(R.id.dynamic_content, ff, &quot;ff&quot;);</div><div class="line">              break;</div><div class="line">      &#125;</div><div class="line">      //事务提交</div><div class="line">      bt.commit();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>activity_dynamic_add.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:id=&quot;@+id/dynamic_content&quot;</div><div class="line">    tools:context=&quot;com.jkwar.FragmentDemo.activity.DynamicAddActivity&quot;&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/addBtn&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;添加&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/removeBtn&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;移除&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/hideBtn&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;隐藏&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/showBtn&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;显示&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/replaceBtn&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;替换&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="Fragment-的生命周期"><a href="#Fragment-的生命周期" class="headerlink" title="Fragment 的生命周期"></a>Fragment 的生命周期</h3><p><img src="http://oglc61v4u.bkt.clouddn.com/0EVReuq.png" alt=""></p>
<blockquote>
<p>Fragment所在的Activity的生命周期会影响Fragment的生命周期，表现为Activity的每次生命周期回调都会引发每个Fragment的类似回调，比如：当Activity收到onPause（）时，Activity的每个Fragment都会收到onPause（）。<br>不过，fragment还有几个额外的生命周期，用于处理与Activity的交互，构造、销毁fragment UI等操作。这些回调方法是：</p>
</blockquote>
<ul>
<li>onAttach（）：Fragment和Activity建立关联的时候调用。</li>
<li>onCreateView()：为Fragment加载布局时调用。</li>
<li>onActivityCreated()：当Activity中的onCreate方法执行完后调用。</li>
<li>onDestroyView()：Fragment中的布局被移除时调用。</li>
<li>onDetach()：Fragment和Activity解除关联的时候调用。</li>
</ul>
<p>我们通过代码了解一下Fragment 生命周期：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">public class LifecycleFragment extends Fragment &#123;</div><div class="line">    private final String TAG=LifecycleFragment.class.getSimpleName();</div><div class="line"></div><div class="line">    public LifecycleFragment() &#123;</div><div class="line">        // Required empty public constructor</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //在Fragment已与Activity关联时调用</div><div class="line">    @Override</div><div class="line">    public void onAttach(Context context) &#123;</div><div class="line">        super.onAttach(context);</div><div class="line">        Log.d(TAG, &quot;onAttach: &quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        Log.d(TAG, &quot;onCreate: &quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //为Fragment加载布局时调用</div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container,</div><div class="line">                             Bundle savedInstanceState) &#123;</div><div class="line">        Log.d(TAG, &quot;onCreateView: &quot;);</div><div class="line">        return inflater.inflate(R.layout.fragment_lifecycle, container, false);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onViewCreated(view, savedInstanceState);</div><div class="line">        Log.d(TAG, &quot;onViewCreated: &quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //当Activity中的onCreate方法执行完后调用</div><div class="line">    @Override</div><div class="line">    public void onActivityCreated(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onActivityCreated(savedInstanceState);</div><div class="line">        Log.d(TAG, &quot;onActivityCreated: &quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onStart() &#123;</div><div class="line">        super.onStart();</div><div class="line">        Log.d(TAG, &quot;onStart: &quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onResume() &#123;</div><div class="line">        super.onResume();</div><div class="line">        Log.d(TAG, &quot;onResume: &quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onPause() &#123;</div><div class="line">        super.onPause();</div><div class="line">        Log.d(TAG, &quot;onPause: &quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //Fragment中的布局被移除时调用</div><div class="line">    @Override</div><div class="line">    public void onDestroyView() &#123;</div><div class="line">        super.onDestroyView();</div><div class="line">        Log.d(TAG, &quot;onDestroyView: &quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onDestroy() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        Log.d(TAG, &quot;onDestroy: &quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //Fragment和Activity解除关联的时候调用</div><div class="line">    @Override</div><div class="line">    public void onDetach() &#123;</div><div class="line">        super.onDetach();</div><div class="line">        Log.d(TAG, &quot;onDetach: &quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行程序，打印日志如下：<br><img src="http://oglc61v4u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-26%2018.01.40.png" alt=""></p>
<p>点击Home键，打印日志如下：<br><img src="http://oglc61v4u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-26%2018.01.54.png" alt=""></p>
<p>重新进入重新，打印日志如下：<br><img src="http://oglc61v4u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-26%2018.02.18.png" alt=""></p>
<p>点击back键退出重新，打印日志如下：<br><img src="http://oglc61v4u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-26%2018.02.29.png" alt=""></p>
<p><a href="https://github.com/zhanaotian/FragmentDemo/tree/master" target="_blank" rel="external">源码下载</a></p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p>(<a href="http://blog.csdn.net/guolin_blog/article/details/8881711" target="_blank" rel="external">http://blog.csdn.net/guolin_blog/article/details/8881711</a>)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Fragment-简介&quot;&gt;&lt;a href=&quot;#Fragment-简介&quot; class=&quot;headerlink&quot; title=&quot;Fragment 简介&quot;&gt;&lt;/a&gt;Fragment 简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Android 在 Android 3.0（API 级别  11）中引入了片段，主要是为了给大屏幕（如平板电脑）&lt;br&gt;上更加动态和灵活的UI设计提供支持。可以将多个Fragmen组合在一个Activity中来构建多窗格UI，&lt;br&gt;以及在多个Activity中重复使用某个Fragment，可以将Fragment视为Activity的模块化组成部分。&lt;br&gt;Fragment是必须嵌入Activity中，其生命周期直接受宿主 Activity 生命周期的影响，&lt;br&gt;它不能独立于Activity运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.android.google.cn/images/fundamentals/fragments.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Fragment" scheme="http://jkwarthegarden.com/categories/Fragment/"/>
    
    
      <category term="Fragment" scheme="http://jkwarthegarden.com/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>Android 导航栏和状态栏操作</title>
    <link href="http://jkwarthegarden.com/2016/04/12/Android%20%E5%AF%BC%E8%88%AA%E6%A0%8F%E5%92%8C%E7%8A%B6%E6%80%81%E6%A0%8F%E6%93%8D%E4%BD%9C/"/>
    <id>http://jkwarthegarden.com/2016/04/12/Android 导航栏和状态栏操作/</id>
    <published>2016-04-11T17:34:14.000Z</published>
    <updated>2017-03-28T19:58:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="淡化状态栏和系统栏"><a href="#淡化状态栏和系统栏" class="headerlink" title="淡化状态栏和系统栏"></a>淡化状态栏和系统栏</h3><blockquote>
<p>在版本为4.0以上的Android系统上,可以使用 SYSTEM_UI_FLAG_LOW_PROFILE 这个标签</p>
</blockquote>
<p>  <code>decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);</code></p>
<a id="more"></a>  
<h3 id="显示状态栏与导航栏"><a href="#显示状态栏与导航栏" class="headerlink" title="显示状态栏与导航栏"></a>显示状态栏与导航栏</h3><p>  <code>decorView.setSystemUiVisibility(0);</code></p>
<h3 id="隐藏状态栏"><a href="#隐藏状态栏" class="headerlink" title="隐藏状态栏"></a>隐藏状态栏</h3><ol>
<li><p>在4.0及以下版本中隐藏状态栏有2种方法</p>
<ol>
<li>在你的manifest文件中设置Activity的主题<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;application</div><div class="line">  android:theme=&quot;@android:style/Theme.Holo.NoActionBar.Fullscreen&quot; &gt;</div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>设置主题的优势是:<br>易于维护，且不像动态设置标签那样容易出错。<br>有更流畅的UI转换，因为在初始化你的Activity之前,系统已经得到了需要渲染UI的信息。</p>
</blockquote>
<ol>
<li>使用WindowManager来动态隐藏状态栏<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line"> @Override</div><div class="line"> protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">     super.onCreate(savedInstanceState);</div><div class="line">     if (Build.VERSION.SDK_INT &lt; 16) &#123;</div><div class="line">         getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,</div><div class="line">                 WindowManager.LayoutParams.FLAG_FULLSCREEN);</div><div class="line">     &#125;</div><div class="line">     setContentView(R.layout.activity_main);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>在4.1及以上版本中隐藏状态栏。<br>使用 setSystemUiVisibility() 进行动态隐藏</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">View decorView = getWindow().getDecorView();</div><div class="line">int uiOptions = View.SYSTEM_UI_FLAG_FULLSCREEN;</div><div class="line">decorView.setSystemUiVisibility(uiOptions);</div><div class="line">ActionBar actionBar = getActionBar();</div><div class="line">actionBar.hide();</div></pre></td></tr></table></figure>
</li>
<li><p>让内容显示在状态栏之后。</p>
<blockquote>
<p>使用 SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN 标签<br>并在xml 中使用android:fitsSystemWindows=”true”,<br>它会调整父ViewGroup使它留出特定区域给系统栏,确保应用中特定区域不会被系统栏掩盖。</p>
</blockquote>
</li>
</ol>
<h3 id="隐藏导航栏"><a href="#隐藏导航栏" class="headerlink" title="隐藏导航栏"></a>隐藏导航栏</h3><ol>
<li><p>在4.0及以上版本中隐藏导航栏</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">View decorView = getWindow().getDecorView();</div><div class="line">int uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</div><div class="line">             | View.SYSTEM_UI_FLAG_FULLSCREEN;</div><div class="line">decorView.setSystemUiVisibility(uiOptions);</div></pre></td></tr></table></figure>
</li>
<li><p>让内容显示在导航栏之后</p>
<blockquote>
<p>使用 SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION 标签</p>
</blockquote>
<ul>
<li>要注意的几点:</li>
<li>一旦UI标签被清除就必须重新设置(比如跳到另外一个Activity)。</li>
<li>在不同地方监听UI标签是有所不同的,比如在Activity的onCreate()方法中隐藏状态      栏,当用户按下home键系统栏就会重新显示,如果你想让在不同Activity之间切换,系统UI保持不变，你需要在onResume()与onWindowFocusChaned()里设定UI标签。</li>
<li>setSystemUiVisibility()仅仅在被调用的View显示的时候才会生效。</li>
<li>当从View导航到别的地方时，用setSystemUiVisibility()设置的标签会被清除。</li>
</ul>
</li>
</ol>
<h3 id="全屏沉浸式应用"><a href="#全屏沉浸式应用" class="headerlink" title="全屏沉浸式应用"></a>全屏沉浸式应用</h3><p> 使用非粘性沉浸模式<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mDecorView.setSystemUiVisibility(</div><div class="line">           View.SYSTEM_UI_FLAG_LAYOUT_STABLE</div><div class="line">           | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</div><div class="line">           | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class="line">           | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // 隐藏导航栏</div><div class="line">           | View.SYSTEM_UI_FLAG_FULLSCREEN // 隐藏状态栏</div><div class="line">           | View.SYSTEM_UI_FLAG_IMMERSIVE);</div></pre></td></tr></table></figure></p>
<p> 使用粘性沉浸模式<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">decorView.setSystemUiVisibility(</div><div class="line">               View.SYSTEM_UI_FLAG_LAYOUT_STABLE</div><div class="line">               | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</div><div class="line">               | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</div><div class="line">               | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION</div><div class="line">               | View.SYSTEM_UI_FLAG_FULLSCREEN</div><div class="line">               | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);</div></pre></td></tr></table></figure></p>
<p> 注意沉浸式只能在android 4.4以上的系统使用</p>
<h3 id="响应UI可见性的变化"><a href="#响应UI可见性的变化" class="headerlink" title="响应UI可见性的变化"></a>响应UI可见性的变化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">decorView.setOnSystemUiVisibilityChangeListener</div><div class="line">   (new View.OnSystemUiVisibilityChangeListener() &#123;</div><div class="line">    @Override</div><div class="line">    public void onSystemUiVisibilityChange(int visibility) &#123;</div><div class="line">        //全屏</div><div class="line">        if ((visibility &amp; View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) &#123;</div><div class="line">        </div><div class="line">        &#125; else &#123;</div><div class="line">        </div><div class="line">        &#125;</div><div class="line">     &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;淡化状态栏和系统栏&quot;&gt;&lt;a href=&quot;#淡化状态栏和系统栏&quot; class=&quot;headerlink&quot; title=&quot;淡化状态栏和系统栏&quot;&gt;&lt;/a&gt;淡化状态栏和系统栏&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在版本为4.0以上的Android系统上,可以使用 SYSTEM_UI_FLAG_LOW_PROFILE 这个标签&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  &lt;code&gt;decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android 视图" scheme="http://jkwarthegarden.com/categories/Android-%E8%A7%86%E5%9B%BE/"/>
    
    
      <category term="状态栏,导航栏" scheme="http://jkwarthegarden.com/tags/%E7%8A%B6%E6%80%81%E6%A0%8F-%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android 半通明状态栏</title>
    <link href="http://jkwarthegarden.com/2016/04/08/Android%20%E5%8D%8A%E9%80%9A%E6%98%8E%E7%8A%B6%E6%80%81%E6%A0%8F/"/>
    <id>http://jkwarthegarden.com/2016/04/08/Android 半通明状态栏/</id>
    <published>2016-04-07T16:45:00.000Z</published>
    <updated>2017-03-28T19:58:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Android 从4.4 版本开始支持半透明状态栏效果。<br>4.4设置方式与5.0不同(5.0推出了Material Design,不用设置默认就有)。<br>在4.4 设置半通明状态栏效果,有2种方法。</p>
</blockquote>
<a id="more"></a>  
<h4 id="第一种方案"><a href="#第一种方案" class="headerlink" title="第一种方案"></a>第一种方案</h4><ol>
<li><p>在代码中设置透明化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">    WindowManager.LayoutParams localLayoutParams = getWindow().getAttributes();</div><div class="line">    localLayoutParams.flags = (WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS |            localLayoutParams.flags);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使布局扩展至系统状态栏,状态栏会覆盖在toolbar上。</p>
</li>
<li><p>在根布局中添加<br><code>android:paddingTop=&quot;@dimen/toolbar_padding_top&quot;</code><br>在values中的dimens文件里设为0dp,在values-v19的styles里设为25dp。</p>
</li>
</ol>
<h4 id="第二种方案"><a href="#第二种方案" class="headerlink" title="第二种方案"></a>第二种方案</h4><ol>
<li>在代码中设置透明化<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">    WindowManager.LayoutParams localLayoutParams = getWindow().getAttributes();    </div><div class="line">    localLayoutParams.flags = (WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS|             localLayoutParams.flags);</div><div class="line">    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">         //设置边距</div><div class="line">         view(根布局).setFitsSystemWindows(true);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android 从4.4 版本开始支持半透明状态栏效果。&lt;br&gt;4.4设置方式与5.0不同(5.0推出了Material Design,不用设置默认就有)。&lt;br&gt;在4.4 设置半通明状态栏效果,有2种方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android 视图" scheme="http://jkwarthegarden.com/categories/Android-%E8%A7%86%E5%9B%BE/"/>
    
    
      <category term="状态栏" scheme="http://jkwarthegarden.com/tags/%E7%8A%B6%E6%80%81%E6%A0%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Gradle 第三方依赖统一管理的几种方式</title>
    <link href="http://jkwarthegarden.com/2016/04/06/Android%20Studio%20Gradle%E7%AC%AC%E4%B8%89%E4%BE%9D%E8%B5%96%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86/"/>
    <id>http://jkwarthegarden.com/2016/04/06/Android Studio Gradle第三依赖统一管理/</id>
    <published>2016-04-05T16:00:00.000Z</published>
    <updated>2017-04-27T08:30:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>假设你的 Project 结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root</div><div class="line">  --module1</div><div class="line">    --build.gradle</div><div class="line">  --module2</div><div class="line">    --build.gradle</div><div class="line">  ...</div><div class="line">  --build.gradle</div></pre></td></tr></table></figure></p>
<a id="more"></a>  
<p>###使用脚本 config.gradle<br>为了方便管理，可以在根目录下新建 config.gradle 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">root</div><div class="line">  --module1</div><div class="line">    --build.gradle</div><div class="line">  --module2</div><div class="line">    --build.gradle</div><div class="line">  ...</div><div class="line">  --build.gradle</div><div class="line">  --config.gradle</div></pre></td></tr></table></figure></p>
<p>在 config.gradle 中添加如下代码（具体情况根据自己项目来定）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">    kotlin_version = &apos;1.1.0&apos;</div><div class="line"></div><div class="line">    android = [</div><div class="line">            compileSdkVersion: 25,</div><div class="line">            buildToolsVersion: &quot;25.0.2&quot;,</div><div class="line">            applicationId    : &quot;com.jkwar.TomatoWork&quot;,</div><div class="line">            minSdkVersion    : 15,</div><div class="line">            targetSdkVersion : 25,</div><div class="line">            versionCode      : 1,</div><div class="line">            versionName      : &quot;1.0&quot;</div><div class="line">    ]</div><div class="line"></div><div class="line">    dependencies = [</div><div class="line">            &quot;kotlin-stdlib&quot;       : &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;,</div><div class="line">            &quot;appcompat-v7&quot;        : &quot;com.android.support:appcompat-v7:25.3.1&quot;,</div><div class="line">            &quot;constraint-layout&quot;   : &quot;com.android.support.constraint:constraint-layout:1.0.2&quot;,</div><div class="line">            &quot;rxjava&quot;              : &quot;io.reactivex.rxjava2:rxjava:2.0.8&quot;,</div><div class="line">            &quot;rxandroid&quot;           : &quot;io.reactivex.rxjava2:rxandroid:2.0.1&quot;,</div><div class="line">            &quot;retrofit&quot;            : &quot;com.squareup.retrofit2:retrofit:2.2.0&quot;,</div><div class="line">            &quot;gson&quot;                : &quot;com.google.code.gson:gson:2.6.2&quot;,</div><div class="line">            &quot;converter-gson&quot;      : &quot;com.squareup.retrofit2:converter-gson:2.2.0&quot;,</div><div class="line">            &quot;adapter-rxjava&quot;      : &quot;com.squareup.retrofit2:adapter-rxjava2:2.2.0&quot;,</div><div class="line">            &quot;logging-interceptor&quot; : &quot;com.squareup.okhttp3:logging-interceptor:3.6.0&quot;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 root 目录下的build.gradle 中加上apply from: “config.gradle”<br><img src="http://oglc61v4u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-06%2019.09.53.png" alt=""></p>
<p>在需要添加依赖的 Module 中使用</p>
<ul>
<li>android 节点的使用<br><img src="http://oglc61v4u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-06%2019.11.33.png" alt=""></li>
<li>dependencies 节点的使用<br><img src="http://oglc61v4u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-04-06%2019.11.24.png" alt=""></li>
</ul>
<h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>不新建config.gradle 文件，使用跟目录下的build.gradle文件。</p>
<h3 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h3><p>使用配置文件 gradle.properties（通常 IDE 会自动生成此文件），在此文件中添加键值对：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rxjava=io.reactivex.rxjava2:rxjava:2.0.8</div><div class="line">rxandroid=io.reactivex.rxjava2:rxandroid:2.0.1</div></pre></td></tr></table></figure></p>
<p>在 Module 的 build.gradle 中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile rxjava</div><div class="line">    compile rxandroid</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第一种方式&quot;&gt;&lt;a href=&quot;#第一种方式&quot; class=&quot;headerlink&quot; title=&quot;第一种方式&quot;&gt;&lt;/a&gt;第一种方式&lt;/h3&gt;&lt;p&gt;假设你的 Project 结构如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;root&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  --module1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --build.gradle&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  --module2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    --build.gradle&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  --build.gradle&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android Studio" scheme="http://jkwarthegarden.com/categories/Android-Studio/"/>
    
    
      <category term="Gradle" scheme="http://jkwarthegarden.com/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Android TouchEvent事件传递机制</title>
    <link href="http://jkwarthegarden.com/2016/03/31/Android%20TouchEvent%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/"/>
    <id>http://jkwarthegarden.com/2016/03/31/Android TouchEvent事件传递机制/</id>
    <published>2016-03-31T09:10:39.000Z</published>
    <updated>2017-04-01T14:33:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tounch相关的方法"><a href="#Tounch相关的方法" class="headerlink" title="Tounch相关的方法"></a>Tounch相关的方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>方法作用</th>
<th>拥有类            </th>
</tr>
</thead>
<tbody>
<tr>
<td> dispatchTouchEvent()</td>
<td>分派event 调用下面2个方法，一般不重写</td>
<td>ViewGroup子类，非ViewGroup子类</td>
</tr>
<tr>
<td> onInterceptTouchEvent()</td>
<td>拦截event true 拦截   false 不拦截</td>
<td>ViewGroup子类                 </td>
</tr>
<tr>
<td> onTouchEvent()</td>
<td>处理event true 处理了 false 交给上级处理</td>
<td>ViewGroup子类，非ViewGroup子类</td>
</tr>
</tbody>
</table>
 <a id="more"></a>  
<h3 id="事件拦截是什么？"><a href="#事件拦截是什么？" class="headerlink" title="事件拦截是什么？"></a>事件拦截是什么？</h3><p>要了解触摸事件的拦截机制，首先要知道什么是触摸事件？触摸事件顾名思义就是捕获接触屏幕后产生的事件，当操作应用时，会产生多个事件，按下按钮、这是Acition_Down事件，滑动、是Action_MOVE事件，手抬起、是Aciton_UP事件。这些事件你重新onTounchEvent（MotionEventeven）方法，可以从MotionEvent中找到参数。如此，看来触摸事件还是比较简单的，但是Android的View结构是树形结构，ViewGroup可以包含View，另一个ViewGroup，甚至可能继续嵌套，一层层的叠起来，我们的触摸事件就只有一个，分给谁？父ViewGroup和子View，子ViewGroup到底哪个处理，于是就产生了事件拦截。</p>
<h3 id="事件拦截原理"><a href="#事件拦截原理" class="headerlink" title="事件拦截原理"></a>事件拦截原理</h3><p>举一个通俗的例子，假设：你所在的公司有一个总裁，级别最高，下面是部门经理，级别次之，最底层，就是干活的我。</p>
<ol>
<li>现在董事会交给一个任务给总裁。</li>
<li>总裁把这个任务安排给部长。</li>
<li>部长又把这个任务布置给我。</li>
<li>加班加点完成任务，交给部长。</li>
<li>部长感觉任务完成的不错，签名交给总裁。</li>
<li>总裁看了也感觉不错，汇报给董事会。<br>这就是一个完整的事件传递流程。</li>
</ol>
<p>总裁-MyViewGroupA，最外层的ViewGroup<br>部长-MyViewGroupB，中间层的ViewGroup<br>干活的我-MyView，  最底层的View</p>
<p>我们用一个实例来说明：<br>在ViewGroup中我们重写dispatchTouchEvent(),onInterceptTouchEvent(),onTouchEvent()方法，在View我们重写dispatchTouchEvent()，onTouchEvent() 方法。<br>这里可以看出ViewGroup的级别比较高，有onInterceptTouchEvent()这个事件拦截方法。</p>
<ol>
<li><p>首先我们点击View，log打印如下：<br><img src="http://oglc61v4u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-31%2016.30.21.png" alt=""><br>可以看出事件的传递顺序是：<br>总裁（MyViewGroupA）-&gt; 部长（MyViewGroupB）-&gt; 我（MyView）事件传递先执行dispatchTouchEvent()方法，在执行onInterceptTouchEvent()方法。<br>事件处理的顺序是：<br>我（MyView）-&gt; 部长（MyViewGroupA）-&gt; 总裁（MyViewGroupA）事件处理都执行的是onTouchEvent()方法。</p>
</li>
<li><p>总裁觉得这个任务太简单自己就能搞定，在onInterceptTouchEvent()中返回true将事件拦截掉，log打印如下：<br><img src="http://oglc61v4u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-31%2016.31.43.png" alt=""><br>和我们设想的一样，总裁一个人把事情干完了，下面的人就没事干了。</p>
</li>
<li><p>部长觉得总裁安排的任务太简单，没必麻烦我，log打印如下：<br><img src="http://oglc61v4u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-31%2016.37.28.png" alt=""><br>这次我（MyView）就不用干活了。</p>
</li>
<li><p>你每天处理完任务想上司报告，那天你受不了压迫，不想干了，自己罢工，在onTouchEvent()返回True，log打印如下：<br><img src="http://oglc61v4u.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-31%2016.58.28.png" alt=""><br>事件传递还是跟以前一样，但是事件处理却在我（MyView）这里断掉了。</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p>(<a href="http://blog.csdn.net/morgan_xww/article/details/9372285" target="_blank" rel="external">http://blog.csdn.net/morgan_xww/article/details/9372285</a>)<br>(<a href="http://www.cnblogs.com/linjzong/p/4191891.html" target="_blank" rel="external">http://www.cnblogs.com/linjzong/p/4191891.html</a>)</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Tounch相关的方法&quot;&gt;&lt;a href=&quot;#Tounch相关的方法&quot; class=&quot;headerlink&quot; title=&quot;Tounch相关的方法&quot;&gt;&lt;/a&gt;Tounch相关的方法&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名&lt;/th&gt;
&lt;th&gt;方法作用&lt;/th&gt;
&lt;th&gt;拥有类            &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt; dispatchTouchEvent()&lt;/td&gt;
&lt;td&gt;分派event 调用下面2个方法，一般不重写&lt;/td&gt;
&lt;td&gt;ViewGroup子类，非ViewGroup子类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; onInterceptTouchEvent()&lt;/td&gt;
&lt;td&gt;拦截event true 拦截   false 不拦截&lt;/td&gt;
&lt;td&gt;ViewGroup子类                 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt; onTouchEvent()&lt;/td&gt;
&lt;td&gt;处理event true 处理了 false 交给上级处理&lt;/td&gt;
&lt;td&gt;ViewGroup子类，非ViewGroup子类&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Android 视图" scheme="http://jkwarthegarden.com/categories/Android-%E8%A7%86%E5%9B%BE/"/>
    
    
      <category term="触摸事件" scheme="http://jkwarthegarden.com/tags/%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android Paint 属性详解</title>
    <link href="http://jkwarthegarden.com/2016/01/19/Android%20Paint%20%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jkwarthegarden.com/2016/01/19/Android Paint 属性详解/</id>
    <published>2016-01-18T16:34:14.000Z</published>
    <updated>2017-03-28T19:58:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Paint即画笔,在绘图过程中起到了极其重要的作用,画笔主要保存了颜色，  </p>
<p>样式等绘制信息,指定了如何绘制文本和图形,画笔对象有很多设置方法，  </p>
<p>大体上可以分为两类,一类与图形绘制相关,一类与文本绘制相关. </p>
<a id="more"></a>
<h4 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h4><ol>
<li><p>设置Paint的标志<br>Paint.ANTI_ALIAS_FLAG 抗锯齿, Paint.FILTER_BITMAP_FLAG 位图过滤器,<br>Paint.DITHER_FLAG 防抖动,   Paint.UNDERLINE_TEXT_FLAG 启用下划线,<br>Paint.STRIKE_THRU_TEXT_FLAG 启用中划线, Paint.FAKE_BOLD_TEXT_FLAG 加粗文本<br>Paint.LINEAR_TEXT_FLAG 线性文本, Paint.SUBPIXEL_TEXT_FLAG 应用子像素抗锯齿效果<br>Paint.DEV_KERN_TEXT_FLAG 使用设备的文本字距。</p>
</li>
<li><p>设置绘制的颜色 a代表透明度，r，g，b代表颜色值。<br><code>setARGB(int a,int r,int g,int b);</code></p>
</li>
<li><p>设置a[0..255] 0：代表全透明  255代表不透明。<br><code>setAlpha(int a);</code></p>
</li>
<li><p>设置绘制的颜色,使用颜色值来表示,该颜色值包括透明度和RGB颜色。<br><code>setColor(int color)</code></p>
</li>
<li><p>设置是否使用抗锯齿功能,会消耗较大资源,绘制图形速度会变慢。<br><code>setAntiAlias(boolean aa);</code></p>
</li>
<li><p>设置是否使用图像抖动处理,会使绘制出来的图片颜色更加平滑和饱满,图像更加清晰。<br><code>setDither(boolean dither);</code></p>
</li>
<li><p>设置画笔的隐藏模式,INTING_OFF 或者 HINTING_ON。<br><code>setHinting(int mode)</code></p>
</li>
<li><p>如果该项设置为true,则图像在动画进行中会滤掉对Bitmap图像      的优化操作,加快显示速度,本设置项依赖于dither和xfermode的设置<br><code>setFilterBitmap(boolean filter);</code></p>
</li>
<li><p>设置MaskFilter,可以用不同的MaskFilter实现滤镜的效果,如滤化,立体等。<br><code>setMaskFilter(MaskFilter maskfilter);</code></p>
</li>
<li><p>设置颜色过滤器,可以在绘制颜色时实现不用颜色的变换效果。<br><code>setColorFilter(ColorFilter colorfilter);</code></p>
</li>
<li><p>设置绘制路径的效果,如点画线等。<br><code>setPathEffect(PathEffect effect);</code>  </p>
</li>
<li><p>设置图像效果,使用Shader可以绘制出各种渐变效果。<br><code>setShader(Shader shader);</code></p>
</li>
<li><p>在图形下面设置阴影层,产生阴影效果,radius为阴影的角度,dx和dy为阴影在x轴和y轴上的距离,       color为阴影的颜色。<br><code>setShadowLayer(float radius ,float dx,float dy,int color);</code></p>
</li>
<li><p>设置画笔的样式,为FILL 描边,FILL_OR_STROKE 描边并填充,或STROKE 填充。<br><code>setStyle(Paint.Style style);</code></p>
</li>
<li><p>设置画笔的笔触风格，如圆形样式Cap.ROUND,或方形样式Cap.SQUARE,默认是Paint.Cap.BUTT,也是方形样式。<br><code>setStrokeCap(Paint.Cap cap);</code></p>
</li>
<li><p>设置接合处的形态，如Join.MITER 锐角,Join.ROUND 圆弧,Join.BEVEL 直线。<br><code>setStrokeJoin(Paint.Join join);</code></p>
</li>
<li><p>设置笔画的倾斜度,取值：&gt;=0,设置笔触的连接处的样式,可以和setStrokeJoin()来比较。<br><code>setStrokeMiter(float miter )</code></p>
</li>
<li><p>设置画笔的粗细度。<br><code>setStrokeWidth(float width);</code></p>
</li>
</ol>
<h4 id="文本绘制"><a href="#文本绘制" class="headerlink" title="文本绘制"></a>文本绘制</h4><ol>
<li><p>模拟实现粗体文字，设置在小字体上效果会非常差。<br>‘setXfermode(Xfermode xfermode);’</p>
</li>
<li><p>设置该项为true，将有助于文本在LCD屏幕上的显示效果。<br><code>setSubpixelText(boolean subpixelText);</code></p>
</li>
<li><p>设置绘制文字的对齐方向。<br><code>setTextAlign(Paint.Align align);</code></p>
</li>
<li><p>设置绘制文字x轴的缩放比例，可以实现文字的拉伸的效果 。<br><code>setTextScaleX(float scaleX);</code></p>
</li>
<li><p>设置绘制文字的字号大小,设置值必须大于0。<br><code>setTextSize(float textSize);</code></p>
</li>
<li><p>设置斜体文字，skewX为倾斜弧度,值为右负左正,官方推崇的值为-0.25。<br><code>setTextSkewX(float skewX);</code></p>
</li>
<li><p>设置Typeface对象,即字体风格,包括粗体,斜体以及衬线体,非衬线体等。<br><code>setTypeface(Typeface typeface);</code></p>
</li>
<li><p>设置带有下划线的文字效果。<br><code>setUnderlineText(boolean underlineText);</code></p>
</li>
<li><p>设置带有删除线的效果。<br><code>setStrikeThruText(boolean strikeThruText);</code></p>
</li>
<li><p>设置是否打开线性文本标识。<br><code>setLinearText (boolean linearText)</code></p>
</li>
<li><p>设置地理位置,直接传入Locale.getDefault()。<br><code>setTextLocale (Locale locale)</code></p>
</li>
<li><p>设置字体的样式,样式可以为null。<br><code>setFontFeatureSettings(String settings)</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Paint即画笔,在绘图过程中起到了极其重要的作用,画笔主要保存了颜色，  &lt;/p&gt;
&lt;p&gt;样式等绘制信息,指定了如何绘制文本和图形,画笔对象有很多设置方法，  &lt;/p&gt;
&lt;p&gt;大体上可以分为两类,一类与图形绘制相关,一类与文本绘制相关. &lt;/p&gt;
    
    </summary>
    
      <category term="Android 绘图" scheme="http://jkwarthegarden.com/categories/Android-%E7%BB%98%E5%9B%BE/"/>
    
    
      <category term="Paint" scheme="http://jkwarthegarden.com/tags/Paint/"/>
    
  </entry>
  
</feed>
